
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check user role from the 'users' collection
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Helper function to check if the user is an admin
    function isAdmin(userId) {
      if (userId == null) {
        return false;
      }
      let userRole = getUserRole(userId);
      return userRole in ['manager', 'designer', 'sales', 'creative', 'manufacturing'];
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can read their own data.
      allow read: if request.auth != null && request.auth.uid == userId;
      // A user can create their own user document upon signup.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Only the user themselves or an admin can update user data.
      allow update: if request.auth != null && (request.auth.uid == userId || isAdmin(request.auth.uid));
      // Only admins can delete users.
      allow delete: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      // Anyone can read products.
      allow read: if true;
      // Only admins can create, update, or delete products.
      allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'categories' collection
    match /categories/{categoryId} {
        // Anyone can read categories
        allow read: if true;
        // Only admins can write to categories
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }

    // Rules for the 'themes' collection
    match /themes/{themeId} {
        // Anyone can read themes
        allow read: if true;
        // Only admins can write to themes
        allow write: if request.auth != null && isAdmin(request.auth.uid);
    }
  }
}
